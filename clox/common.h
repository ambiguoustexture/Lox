#ifndef clox_common_h
#define clox_common_h

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

/* Flag for Dumping Chunks 
 *
 * To help debug the generated bytecode, 
 * add support for dumping the chunk once the compiler finishes. 
 * Had some temporary logging earlier when hand-authored the chunk. */
// #define DEBUG_PRINT_CODE

/* Optional “stress test” mode for the garbage collector. 
 * When this flag is defined, the GC runs as often as it possibly can. 
 * This is, obviously, horrendous for performance. 
 * But it’s great for flushing out memory management bugs 
 * that only occur when a GC is triggered at just the right moment. 
 * If every moment triggers a GC, you’re likely to hit it. */
// #define DEBUG_STRESS_GC

/* A real challenge found with garbage collectors is that they are opaque. 
 * And an easy way to shine a light into the GC’s inner workings 
 * is with some logging: */
// #define DEBUG_LOG_GC

#define UINT8_COUNT (UINT8_MAX + 1)

/* First create a flag to hide the diagnostic logging behind.
 *
 * When this flag is defined, 
 * the VM disassembles and prints each instruction right 
 * before executing it. */
// #define DEBUG_TRACE_EXECUTION

#endif
